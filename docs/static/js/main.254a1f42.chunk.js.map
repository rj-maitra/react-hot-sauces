{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sauces","name","votes","i","v","toConsumableArray","swap","array","j","temp","length","bubbleSort","setState","_this2","react_default","a","createElement","className","map","key","type","class","onClick","vote","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAyEeA,qBArEd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACZC,OAAQ,CACP,CAACC,KAAM,UAAWC,MAAO,GACzB,CAACD,KAAM,kBAAmBC,MAAO,GACjC,CAACD,KAAM,UAAWC,MAAO,GACzB,CAACD,KAAM,WAAYC,MAAO,GAC1B,CAACD,KAAM,UAAWC,MAAO,GACzB,CAACD,KAAM,aAAcC,MAAO,KATZV,oEAcdW,GACJ,IAAIC,EAACX,OAAAY,EAAA,EAAAZ,CAAOE,KAAKI,MAAMC,QAEvB,SAASM,EAAKC,EAAOJ,EAAGK,GACvB,IAAIC,EAAOF,EAAMJ,GACjBI,EAAMJ,GAAKI,EAAMC,GACjBD,EAAMC,GAAKC,EAJZL,EAAED,GAAGD,QAML,SAAoBK,GACnB,IAAI,IAAIJ,EAAII,EAAMG,OAAS,EAAGP,GAAK,EAAGA,IACrC,IAAI,IAAIK,EAAID,EAAMG,OAAS,EAAGF,GAAK,EAAGA,IAClCD,EAAMC,EAAI,GAAGN,MAAQK,EAAMC,GAAGN,OAC/BI,EAAKC,EAAOC,EAAI,EAAGA,GAMxBG,CAAWP,GACXT,KAAKiB,SAAS,CAACZ,OAAQI,qCAGf,IAAAS,EAAAlB,KACR,OACCmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,iDAGPrB,KAAKI,MAAMC,OAAOkB,IAAK,SAACd,EAAGD,GAAJ,OACtBW,EAAAC,EAAAC,cAAA,OAAKG,IAAKhB,EAAGc,UAAU,SACtBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACdH,EAAAC,EAAAC,cAAA,cACCF,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAASC,MAAM,iBAAiBC,QAAST,EAAKU,KAAKC,KAAKX,EAAMV,IAA3E,UAAuFC,EAAEF,SAG3FY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,UAAKZ,EAAEH,sBAxDFwB,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.254a1f42.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component { \n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsauces: [\n\t\t\t\t{name: \"Tabasco\", votes: 0},\n\t\t\t\t{name: \"Frank's Red Hot\", votes: 0},\n\t\t\t\t{name: \"Cholula\", votes: 0},\n\t\t\t\t{name: \"Sriracha\", votes: 0},\n\t\t\t\t{name: \"Crystal\", votes: 0},\n\t\t\t\t{name: \"Texas Pete\", votes: 0}\n\t\t\t]\n\t\t};\n\t}\n\n\tvote(i) {\n\t\tlet v = [...this.state.sauces];\n\t\tv[i].votes++;\n\t\tfunction swap(array, i, j) {\n\t\t\tvar temp = array[i];\n\t\t\tarray[i] = array[j];\n\t\t\tarray[j] = temp;\n\t\t}\n\t\tfunction bubbleSort(array) {\n\t\t\tfor(var i = array.length - 1; i >= 0; i--) {\n\t\t\t\tfor(var j = array.length - 2; j >= 0; j--) {\n\t\t\t\t\tif(array[j + 1].votes > array[j].votes) {\n\t\t\t\t\t\t\tswap(array, j + 1, j);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn array;\n\t\t}\n\t\tbubbleSort(v);\n\t\tthis.setState({sauces: v});\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"col col-lg-8 home\">\n\t\t\t\t\t<div className=\"card\">\n\t\t\t\t\t\t<div className=\"jumbotron\">\n\t\t\t\t\t\t\t<center><h1>Vote for Your Favorite Hot Sauce!</h1></center>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.state.sauces.map( (v, i) => \n\t\t\t\t\t\t\t\t\t<div key={i} className=\"class\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"col col-sm-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<center>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-danger\" onClick={this.vote.bind(this, i)}>Votes: {v.votes}</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</center>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"col\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h4>{v.name}</h4>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}